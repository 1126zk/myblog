{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to ZK's Website \u5f53\u524d\u6b63\u5728\u66f4\u65b0rcore\u7cfb\u5217 \u200b","title":"Home"},{"location":"#welcome-to-zks-website","text":"","title":"Welcome to ZK's Website"},{"location":"#rcore","text":"\u200b","title":"\u5f53\u524d\u6b63\u5728\u66f4\u65b0rcore\u7cfb\u5217"},{"location":"ch1firstInstruction/","text":"\u5185\u6838\u7b2c\u4e00\u6761\u6307\u4ee4 \u7b2c\u4e00\u7ae0\u4ee3\u7801\u6811 ./os/src Rust 4 Files 119 Lines Assembly 1 Files 11 Lines \u251c\u2500\u2500 bootloader(\u5185\u6838\u4f9d\u8d56\u7684\u8fd0\u884c\u5728 M \u7279\u6743\u7ea7\u7684 SBI \u5b9e\u73b0\uff0c\u672c\u9879\u76ee\u4e2d\u6211\u4eec\u4f7f\u7528 RustSBI) \u2502 \u251c\u2500\u2500 rustsbi-k210.bin(\u53ef\u8fd0\u884c\u5728 k210 \u771f\u5b9e\u786c\u4ef6\u5e73\u53f0\u4e0a\u7684\u9884\u7f16\u8bd1\u4e8c\u8fdb\u5236\u7248\u672c) \u2502 \u2514\u2500\u2500 rustsbi-qemu.bin(\u53ef\u8fd0\u884c\u5728 qemu \u865a\u62df\u673a\u4e0a\u7684\u9884\u7f16\u8bd1\u4e8c\u8fdb\u5236\u7248\u672c) \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 os(\u6211\u4eec\u7684\u5185\u6838\u5b9e\u73b0\u653e\u5728 os \u76ee\u5f55\u4e0b) \u2502 \u251c\u2500\u2500 Cargo.toml(\u5185\u6838\u5b9e\u73b0\u7684\u4e00\u4e9b\u914d\u7f6e\u6587\u4ef6) \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 src(\u6240\u6709\u5185\u6838\u7684\u6e90\u4ee3\u7801\u653e\u5728 os/src \u76ee\u5f55\u4e0b) \u2502 \u251c\u2500\u2500 console.rs(\u5c06\u6253\u5370\u5b57\u7b26\u7684 SBI \u63a5\u53e3\u8fdb\u4e00\u6b65\u5c01\u88c5\u5b9e\u73b0\u66f4\u52a0\u5f3a\u5927\u7684\u683c\u5f0f\u5316\u8f93\u51fa) \u2502 \u251c\u2500\u2500 entry.asm(\u8bbe\u7f6e\u5185\u6838\u6267\u884c\u73af\u5883\u7684\u7684\u4e00\u6bb5\u6c47\u7f16\u4ee3\u7801) \u2502 \u251c\u2500\u2500 lang_items.rs(\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u7ed9 Rust \u7f16\u8bd1\u5668\u7684\u4e00\u4e9b\u8bed\u4e49\u9879\uff0c\u76ee\u524d\u5305\u542b\u5185\u6838 panic \u65f6\u7684\u5904\u7406\u903b\u8f91) \u2502 \u251c\u2500\u2500 linker-k210.ld(\u63a7\u5236\u5185\u6838\u5185\u5b58\u5e03\u5c40\u7684\u94fe\u63a5\u811a\u672c\u4ee5\u4f7f\u5185\u6838\u8fd0\u884c\u5728 k210 \u771f\u5b9e\u786c\u4ef6\u5e73\u53f0\u4e0a) \u2502 \u251c\u2500\u2500 linker-qemu.ld(\u63a7\u5236\u5185\u6838\u5185\u5b58\u5e03\u5c40\u7684\u94fe\u63a5\u811a\u672c\u4ee5\u4f7f\u5185\u6838\u8fd0\u884c\u5728 qemu \u865a\u62df\u673a\u4e0a) \u2502 \u251c\u2500\u2500 main.rs(\u5185\u6838\u4e3b\u51fd\u6570) \u2502 \u2514\u2500\u2500 sbi.rs(\u8c03\u7528\u5e95\u5c42 SBI \u5b9e\u73b0\u63d0\u4f9b\u7684 SBI \u63a5\u53e3) \u251c\u2500\u2500 README.md \u251c\u2500\u2500 rust-toolchain(\u63a7\u5236\u6574\u4e2a\u9879\u76ee\u7684\u5de5\u5177\u94fe\u7248\u672c) \u2514\u2500\u2500 tools(\u81ea\u52a8\u4e0b\u8f7d\u7684\u5c06\u5185\u6838\u70e7\u5199\u5230 k210 \u5f00\u53d1\u677f\u4e0a\u7684\u5de5\u5177) \u251c\u2500\u2500 kflash.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.rst \u2514\u2500\u2500 setup.py \u672c\u8282\u6587\u4ef6\u89e3\u6790 bootloader \u6587\u4ef6\u5939\u4e0b rustsbi-qemu.bin os \u6587\u4ef6\u5939\u4e0b ./cargo/config # \u914d\u7f6e\u6587\u4ef6\u6ca1\u6709\u6ce8\u91ca\uff0c \u9ed8\u8ba4 # \u540e\u9762\u63a5\u6ce8\u91ca [build] target = \"riscv64gc-unknown-none-elf\" # \u6307\u5b9a\u76ee\u6807\u5e73\u53f0\uff0c\u4e0d\u7136\u7f16\u8bd1\u65f6\u8981\u5e26\u4e0a\u53c2\u6570 # cargo run --target riscv64gc-unknown-none-elf [target.riscv64gc-unknown-none-elf] rustflags = [ \"-Clink-arg=-Tsrc/linker.ld\", \"-Cforce-frame-pointers=yes\" ] # \u7528\u4e8e\u6307\u5b9a\u94fe\u63a5\u6587\u4ef6\u7684\u5730\u5740 # -T\u540e\u9762\u63a5\u6587\u4ef6\u8def\u5f84 # -Cforce-frame-pointers=yes \u4f30\u8ba1\u662fllvm\u4e2d\u5bf9\u6307\u9488\u7684\u4f18\u5316\u6216\u5176\u4ed6\u5e95\u5c42\u64cd\u4f5c os/Cargo.toml [package] name = \"os\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] # \u6b64\u65f6\u8fd8\u4e0d\u9700\u8981\u914d\u7f6e\u4ec0\u4e48 os/src/entry.asm .section .text.entry .globl _start _start: li x1, 100 # \u8fd9\u5c31\u662f\u672c\u8282\u6240\u8bf4\u7684 \u5185\u6838\u7b2c\u4e00\u6761\u6307\u4ee4 # \u5c31\u662f\u4e00\u6761\u5355\u7eaf\u7684 riscv \u7684\u6c47\u7f16\u4ee3\u7801 os/src/linker.ld # \u94fe\u63a5\u811a\u672c OUTPUT_ARCH(riscv) # \u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u6240\u5728\u7684\u5e73\u53f0 ENTRY(_start) # \u6307\u5b9a\u5165\u53e3\u5730\u5740 # \u5728\u7a0b\u5e8f\u4e2d\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u79f0\u4e3a\u5165\u53e3\u70b9\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 ENTRY \u94fe\u63a5\u5668\u811a\u672c\u547d\u4ee4\u6765\u8bbe\u7f6e\u5165\u53e3\u70b9\u3002 \u53c2\u6570\u662f\u7b26\u53f7\u540d\u79f0 BASE_ADDRESS = 0x80200000; # \u7c7b\u4f3c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf # \u6307\u4ee4\u5185\u6838\u4ece 0x80200000 \u5904\u5f00\u59cb\u5b58\u653e SECTIONS { . = BASE_ADDRESS; skernel = .; stext = .; .text : { *(.text.entry) *(.text .text.*) } # \u5185\u6838\u4ece 0x80200000 \u5f00\u59cb\uff0c # \u6700\u5f00\u65f6\u5b58\u653e\u7684\u662f \u4ee3\u7801\u6bb5\uff0c # \u800c\u4e14\u662f\u6307\u5b9a\u7684 .text.entry \u6bb5 # \u5373 entry.asm \u7684 \u7b2c\u4e00\u4e2a\u4ee3\u7801\u6bb5 # \u5176\u4ed6\u7684\u4ee3\u7801\u6bb5\u4e5f\u5b58\u653e\u5728\u6b64\u5904 . = ALIGN(4K); etext = .; srodata = .; .rodata : { *(.rodata .rodata.*) *(.srodata .srodata.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709\u7684 rodata \u6bb5 . = ALIGN(4K); erodata = .; sdata = .; .data : { *(.data .data.*) *(.sdata .sdata.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709 data \u6bb5 . = ALIGN(4K); edata = .; .bss : { *(.bss.stack) sbss = .; *(.bss .bss.*) *(.sbss .sbss.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709 bss \u6bb5 # \u6ce8\u610f\uff0c\u6709\u4e2a \u7279\u6b8a\u7684\u6808\u6bb5\u4e5f\u5b58\u653e\u5728\u6b64\u5904 # \u5373 .bss.stack \u6bb5 . = ALIGN(4K); ebss = .; ekernel = .; /DISCARD/ : { *(.eh_frame) } } os/src/lang_items.rs use core::panic::PanicInfo; #[panic_handler] fn panic(_info: &PanicInfo) -> ! { loop {} } //\u6b64\u65f6\u53ea\u662f\u91cd\u5199\u4e86 panic //\u4f46\u672a\u505a\u4efb\u4f55\u5904\u7406 \u5f85\u89e3\u51b3\u7684\u95ee\u9898 \u6211\u4eec\u5c1d\u8bd5\u76f4\u63a5\u8c03\u7528\u5b83\uff0c\u770b\u4f1a\u51fa\u73b0\u4ec0\u4e48\u60c5\u51b5 \u5b83\u80fd\u5426\u88ab\u8c03\u7528\uff0c\u662f\u5426\u88ab\u8c03\u7528 \u5355\u5f53\u6267\u884c\u5b8c 0x8020000 \u7684 li ra, 100 \u540e\u518d\u6b21\u6267\u884c si\uff0c\u540e\u9762\u90fd\u662funimp\uff0c\u4f46\u4e3a\u4ec0\u4e48\u8fd8\u53ef\u4ee5\u6267\u884c \u8df3\u8f6c\u540e\u7684\u4ee3\u7801\u662f\u5426\u4e3a panic\u7684\uff0c\u4e3a\u4ec0\u4e48\u4e00\u76f4si\u6267\u884c\u5230 0x800007956\u540e\u6267\u884c\uff0c\u4f1a\u8c03\u52300x80200000 \u518d\u6b21\u57280x80007956\u5904\u8bbe\u65ad\u70b9\u540e\u6267\u884c\u4e00\u5708\uff0c\u5c31\u8df3\u52300x00000000\u5904\u4e86\uff0c\u5e76\u4e14\u4e0d\u80fd\u6267\u884c\u4e86 ------------------------------------------------------------------------ ==== ------------------------------------------------------------------------ os/src/main.rs #![no_std] #![no_main] mod lang_items; use core::arch::global_asm; global_asm!(include_str!(\"entry.asm\")); // \u7531\u4e8e\u8fd9\u662f\u4e2arust\u9879\u76ee\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u76f4\u63a5\u7528\u6c47\u7f16\u5668\u7f16\u8bd1 \u6c47\u7f16\u4ee3\u7801 // \u6240\u4ee5 \u6211\u4eec\u662f\u4ee5\u5185\u8054\u6c47\u7f16\u7684\u5f62\u5f0f\u5c06\u6c47\u7f16\u4ee3\u7801\u5bfc\u5165\u5230rust\u6587\u4ef6\u4e2d\uff0c\u518d\u7f16\u8bd1 // \u6240\u4ee5\u9879\u76ee\u7684\u5165\u53e3\u8fd8\u662f main.rs // \u53ea\u4e0d\u8fc7\u4ee3\u7801\u7684\u6267\u884c\u5982\u4f55\u4e0d\u662fmain\u51fd\u6570\u4e86 // \u800c\u662f\u6307\u5b9a\u7684_start //fn main() { // println!(\"Hello, world!\"); //} \u6267\u884c\u6d41\u7a0b main.rs \u4e2d\u5185\u8054\u7684 entry.esm \u7684\u4e00\u6761riscv\u7684\u6c47\u7f16\u6307\u4ee4","title":"\u5185\u6838\u7b2c\u4e00\u6761\u6307\u4ee4"},{"location":"ch1firstInstruction/#_1","text":"","title":"\u5185\u6838\u7b2c\u4e00\u6761\u6307\u4ee4"},{"location":"ch1firstInstruction/#_2","text":"./os/src Rust 4 Files 119 Lines Assembly 1 Files 11 Lines \u251c\u2500\u2500 bootloader(\u5185\u6838\u4f9d\u8d56\u7684\u8fd0\u884c\u5728 M \u7279\u6743\u7ea7\u7684 SBI \u5b9e\u73b0\uff0c\u672c\u9879\u76ee\u4e2d\u6211\u4eec\u4f7f\u7528 RustSBI) \u2502 \u251c\u2500\u2500 rustsbi-k210.bin(\u53ef\u8fd0\u884c\u5728 k210 \u771f\u5b9e\u786c\u4ef6\u5e73\u53f0\u4e0a\u7684\u9884\u7f16\u8bd1\u4e8c\u8fdb\u5236\u7248\u672c) \u2502 \u2514\u2500\u2500 rustsbi-qemu.bin(\u53ef\u8fd0\u884c\u5728 qemu \u865a\u62df\u673a\u4e0a\u7684\u9884\u7f16\u8bd1\u4e8c\u8fdb\u5236\u7248\u672c) \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 os(\u6211\u4eec\u7684\u5185\u6838\u5b9e\u73b0\u653e\u5728 os \u76ee\u5f55\u4e0b) \u2502 \u251c\u2500\u2500 Cargo.toml(\u5185\u6838\u5b9e\u73b0\u7684\u4e00\u4e9b\u914d\u7f6e\u6587\u4ef6) \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 src(\u6240\u6709\u5185\u6838\u7684\u6e90\u4ee3\u7801\u653e\u5728 os/src \u76ee\u5f55\u4e0b) \u2502 \u251c\u2500\u2500 console.rs(\u5c06\u6253\u5370\u5b57\u7b26\u7684 SBI \u63a5\u53e3\u8fdb\u4e00\u6b65\u5c01\u88c5\u5b9e\u73b0\u66f4\u52a0\u5f3a\u5927\u7684\u683c\u5f0f\u5316\u8f93\u51fa) \u2502 \u251c\u2500\u2500 entry.asm(\u8bbe\u7f6e\u5185\u6838\u6267\u884c\u73af\u5883\u7684\u7684\u4e00\u6bb5\u6c47\u7f16\u4ee3\u7801) \u2502 \u251c\u2500\u2500 lang_items.rs(\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u7ed9 Rust \u7f16\u8bd1\u5668\u7684\u4e00\u4e9b\u8bed\u4e49\u9879\uff0c\u76ee\u524d\u5305\u542b\u5185\u6838 panic \u65f6\u7684\u5904\u7406\u903b\u8f91) \u2502 \u251c\u2500\u2500 linker-k210.ld(\u63a7\u5236\u5185\u6838\u5185\u5b58\u5e03\u5c40\u7684\u94fe\u63a5\u811a\u672c\u4ee5\u4f7f\u5185\u6838\u8fd0\u884c\u5728 k210 \u771f\u5b9e\u786c\u4ef6\u5e73\u53f0\u4e0a) \u2502 \u251c\u2500\u2500 linker-qemu.ld(\u63a7\u5236\u5185\u6838\u5185\u5b58\u5e03\u5c40\u7684\u94fe\u63a5\u811a\u672c\u4ee5\u4f7f\u5185\u6838\u8fd0\u884c\u5728 qemu \u865a\u62df\u673a\u4e0a) \u2502 \u251c\u2500\u2500 main.rs(\u5185\u6838\u4e3b\u51fd\u6570) \u2502 \u2514\u2500\u2500 sbi.rs(\u8c03\u7528\u5e95\u5c42 SBI \u5b9e\u73b0\u63d0\u4f9b\u7684 SBI \u63a5\u53e3) \u251c\u2500\u2500 README.md \u251c\u2500\u2500 rust-toolchain(\u63a7\u5236\u6574\u4e2a\u9879\u76ee\u7684\u5de5\u5177\u94fe\u7248\u672c) \u2514\u2500\u2500 tools(\u81ea\u52a8\u4e0b\u8f7d\u7684\u5c06\u5185\u6838\u70e7\u5199\u5230 k210 \u5f00\u53d1\u677f\u4e0a\u7684\u5de5\u5177) \u251c\u2500\u2500 kflash.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.rst \u2514\u2500\u2500 setup.py","title":"\u7b2c\u4e00\u7ae0\u4ee3\u7801\u6811"},{"location":"ch1firstInstruction/#_3","text":"","title":"\u672c\u8282\u6587\u4ef6\u89e3\u6790"},{"location":"ch1firstInstruction/#bootloader","text":"rustsbi-qemu.bin","title":"bootloader \u6587\u4ef6\u5939\u4e0b"},{"location":"ch1firstInstruction/#os","text":"./cargo/config # \u914d\u7f6e\u6587\u4ef6\u6ca1\u6709\u6ce8\u91ca\uff0c \u9ed8\u8ba4 # \u540e\u9762\u63a5\u6ce8\u91ca [build] target = \"riscv64gc-unknown-none-elf\" # \u6307\u5b9a\u76ee\u6807\u5e73\u53f0\uff0c\u4e0d\u7136\u7f16\u8bd1\u65f6\u8981\u5e26\u4e0a\u53c2\u6570 # cargo run --target riscv64gc-unknown-none-elf [target.riscv64gc-unknown-none-elf] rustflags = [ \"-Clink-arg=-Tsrc/linker.ld\", \"-Cforce-frame-pointers=yes\" ] # \u7528\u4e8e\u6307\u5b9a\u94fe\u63a5\u6587\u4ef6\u7684\u5730\u5740 # -T\u540e\u9762\u63a5\u6587\u4ef6\u8def\u5f84 # -Cforce-frame-pointers=yes \u4f30\u8ba1\u662fllvm\u4e2d\u5bf9\u6307\u9488\u7684\u4f18\u5316\u6216\u5176\u4ed6\u5e95\u5c42\u64cd\u4f5c os/Cargo.toml [package] name = \"os\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] # \u6b64\u65f6\u8fd8\u4e0d\u9700\u8981\u914d\u7f6e\u4ec0\u4e48 os/src/entry.asm .section .text.entry .globl _start _start: li x1, 100 # \u8fd9\u5c31\u662f\u672c\u8282\u6240\u8bf4\u7684 \u5185\u6838\u7b2c\u4e00\u6761\u6307\u4ee4 # \u5c31\u662f\u4e00\u6761\u5355\u7eaf\u7684 riscv \u7684\u6c47\u7f16\u4ee3\u7801 os/src/linker.ld # \u94fe\u63a5\u811a\u672c OUTPUT_ARCH(riscv) # \u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u6240\u5728\u7684\u5e73\u53f0 ENTRY(_start) # \u6307\u5b9a\u5165\u53e3\u5730\u5740 # \u5728\u7a0b\u5e8f\u4e2d\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u79f0\u4e3a\u5165\u53e3\u70b9\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 ENTRY \u94fe\u63a5\u5668\u811a\u672c\u547d\u4ee4\u6765\u8bbe\u7f6e\u5165\u53e3\u70b9\u3002 \u53c2\u6570\u662f\u7b26\u53f7\u540d\u79f0 BASE_ADDRESS = 0x80200000; # \u7c7b\u4f3c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf # \u6307\u4ee4\u5185\u6838\u4ece 0x80200000 \u5904\u5f00\u59cb\u5b58\u653e SECTIONS { . = BASE_ADDRESS; skernel = .; stext = .; .text : { *(.text.entry) *(.text .text.*) } # \u5185\u6838\u4ece 0x80200000 \u5f00\u59cb\uff0c # \u6700\u5f00\u65f6\u5b58\u653e\u7684\u662f \u4ee3\u7801\u6bb5\uff0c # \u800c\u4e14\u662f\u6307\u5b9a\u7684 .text.entry \u6bb5 # \u5373 entry.asm \u7684 \u7b2c\u4e00\u4e2a\u4ee3\u7801\u6bb5 # \u5176\u4ed6\u7684\u4ee3\u7801\u6bb5\u4e5f\u5b58\u653e\u5728\u6b64\u5904 . = ALIGN(4K); etext = .; srodata = .; .rodata : { *(.rodata .rodata.*) *(.srodata .srodata.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709\u7684 rodata \u6bb5 . = ALIGN(4K); erodata = .; sdata = .; .data : { *(.data .data.*) *(.sdata .sdata.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709 data \u6bb5 . = ALIGN(4K); edata = .; .bss : { *(.bss.stack) sbss = .; *(.bss .bss.*) *(.sbss .sbss.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709 bss \u6bb5 # \u6ce8\u610f\uff0c\u6709\u4e2a \u7279\u6b8a\u7684\u6808\u6bb5\u4e5f\u5b58\u653e\u5728\u6b64\u5904 # \u5373 .bss.stack \u6bb5 . = ALIGN(4K); ebss = .; ekernel = .; /DISCARD/ : { *(.eh_frame) } } os/src/lang_items.rs use core::panic::PanicInfo; #[panic_handler] fn panic(_info: &PanicInfo) -> ! { loop {} } //\u6b64\u65f6\u53ea\u662f\u91cd\u5199\u4e86 panic //\u4f46\u672a\u505a\u4efb\u4f55\u5904\u7406 \u5f85\u89e3\u51b3\u7684\u95ee\u9898 \u6211\u4eec\u5c1d\u8bd5\u76f4\u63a5\u8c03\u7528\u5b83\uff0c\u770b\u4f1a\u51fa\u73b0\u4ec0\u4e48\u60c5\u51b5 \u5b83\u80fd\u5426\u88ab\u8c03\u7528\uff0c\u662f\u5426\u88ab\u8c03\u7528 \u5355\u5f53\u6267\u884c\u5b8c 0x8020000 \u7684 li ra, 100 \u540e\u518d\u6b21\u6267\u884c si\uff0c\u540e\u9762\u90fd\u662funimp\uff0c\u4f46\u4e3a\u4ec0\u4e48\u8fd8\u53ef\u4ee5\u6267\u884c \u8df3\u8f6c\u540e\u7684\u4ee3\u7801\u662f\u5426\u4e3a panic\u7684\uff0c\u4e3a\u4ec0\u4e48\u4e00\u76f4si\u6267\u884c\u5230 0x800007956\u540e\u6267\u884c\uff0c\u4f1a\u8c03\u52300x80200000 \u518d\u6b21\u57280x80007956\u5904\u8bbe\u65ad\u70b9\u540e\u6267\u884c\u4e00\u5708\uff0c\u5c31\u8df3\u52300x00000000\u5904\u4e86\uff0c\u5e76\u4e14\u4e0d\u80fd\u6267\u884c\u4e86 ------------------------------------------------------------------------ ==== ------------------------------------------------------------------------ os/src/main.rs #![no_std] #![no_main] mod lang_items; use core::arch::global_asm; global_asm!(include_str!(\"entry.asm\")); // \u7531\u4e8e\u8fd9\u662f\u4e2arust\u9879\u76ee\uff0c\u6211\u4eec\u5e76\u6ca1\u6709\u76f4\u63a5\u7528\u6c47\u7f16\u5668\u7f16\u8bd1 \u6c47\u7f16\u4ee3\u7801 // \u6240\u4ee5 \u6211\u4eec\u662f\u4ee5\u5185\u8054\u6c47\u7f16\u7684\u5f62\u5f0f\u5c06\u6c47\u7f16\u4ee3\u7801\u5bfc\u5165\u5230rust\u6587\u4ef6\u4e2d\uff0c\u518d\u7f16\u8bd1 // \u6240\u4ee5\u9879\u76ee\u7684\u5165\u53e3\u8fd8\u662f main.rs // \u53ea\u4e0d\u8fc7\u4ee3\u7801\u7684\u6267\u884c\u5982\u4f55\u4e0d\u662fmain\u51fd\u6570\u4e86 // \u800c\u662f\u6307\u5b9a\u7684_start //fn main() { // println!(\"Hello, world!\"); //}","title":"os \u6587\u4ef6\u5939\u4e0b"},{"location":"ch1firstInstruction/#_4","text":"main.rs \u4e2d\u5185\u8054\u7684 entry.esm \u7684\u4e00\u6761riscv\u7684\u6c47\u7f16\u6307\u4ee4","title":"\u6267\u884c\u6d41\u7a0b"},{"location":"ch1hello/","text":"\u8f93\u51fahello world \u5185\u6838\u7b2c\u4e00\u6761\u6307\u4ee4 \u7b2c\u4e00\u7ae0\u4ee3\u7801\u6811 ./os/src Rust 4 Files 119 Lines Assembly 1 Files 11 Lines \u251c\u2500\u2500 bootloader(\u5185\u6838\u4f9d\u8d56\u7684\u8fd0\u884c\u5728 M \u7279\u6743\u7ea7\u7684 SBI \u5b9e\u73b0\uff0c\u672c\u9879\u76ee\u4e2d\u6211\u4eec\u4f7f\u7528 RustSBI) \u2502 \u251c\u2500\u2500 rustsbi-k210.bin(\u53ef\u8fd0\u884c\u5728 k210 \u771f\u5b9e\u786c\u4ef6\u5e73\u53f0\u4e0a\u7684\u9884\u7f16\u8bd1\u4e8c\u8fdb\u5236\u7248\u672c) \u2502 \u2514\u2500\u2500 rustsbi-qemu.bin(\u53ef\u8fd0\u884c\u5728 qemu \u865a\u62df\u673a\u4e0a\u7684\u9884\u7f16\u8bd1\u4e8c\u8fdb\u5236\u7248\u672c) \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 os(\u6211\u4eec\u7684\u5185\u6838\u5b9e\u73b0\u653e\u5728 os \u76ee\u5f55\u4e0b) \u2502 \u251c\u2500\u2500 Cargo.toml(\u5185\u6838\u5b9e\u73b0\u7684\u4e00\u4e9b\u914d\u7f6e\u6587\u4ef6) \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 src(\u6240\u6709\u5185\u6838\u7684\u6e90\u4ee3\u7801\u653e\u5728 os/src \u76ee\u5f55\u4e0b) \u2502 \u251c\u2500\u2500 console.rs(\u5c06\u6253\u5370\u5b57\u7b26\u7684 SBI \u63a5\u53e3\u8fdb\u4e00\u6b65\u5c01\u88c5\u5b9e\u73b0\u66f4\u52a0\u5f3a\u5927\u7684\u683c\u5f0f\u5316\u8f93\u51fa) \u2502 \u251c\u2500\u2500 entry.asm(\u8bbe\u7f6e\u5185\u6838\u6267\u884c\u73af\u5883\u7684\u7684\u4e00\u6bb5\u6c47\u7f16\u4ee3\u7801) \u2502 \u251c\u2500\u2500 lang_items.rs(\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u7ed9 Rust \u7f16\u8bd1\u5668\u7684\u4e00\u4e9b\u8bed\u4e49\u9879\uff0c\u76ee\u524d\u5305\u542b\u5185\u6838 panic \u65f6\u7684\u5904\u7406\u903b\u8f91) \u2502 \u251c\u2500\u2500 linker-k210.ld(\u63a7\u5236\u5185\u6838\u5185\u5b58\u5e03\u5c40\u7684\u94fe\u63a5\u811a\u672c\u4ee5\u4f7f\u5185\u6838\u8fd0\u884c\u5728 k210 \u771f\u5b9e\u786c\u4ef6\u5e73\u53f0\u4e0a) \u2502 \u251c\u2500\u2500 linker-qemu.ld(\u63a7\u5236\u5185\u6838\u5185\u5b58\u5e03\u5c40\u7684\u94fe\u63a5\u811a\u672c\u4ee5\u4f7f\u5185\u6838\u8fd0\u884c\u5728 qemu \u865a\u62df\u673a\u4e0a) \u2502 \u251c\u2500\u2500 main.rs(\u5185\u6838\u4e3b\u51fd\u6570) \u2502 \u2514\u2500\u2500 sbi.rs(\u8c03\u7528\u5e95\u5c42 SBI \u5b9e\u73b0\u63d0\u4f9b\u7684 SBI \u63a5\u53e3) \u251c\u2500\u2500 README.md \u251c\u2500\u2500 rust-toolchain(\u63a7\u5236\u6574\u4e2a\u9879\u76ee\u7684\u5de5\u5177\u94fe\u7248\u672c) \u2514\u2500\u2500 tools(\u81ea\u52a8\u4e0b\u8f7d\u7684\u5c06\u5185\u6838\u70e7\u5199\u5230 k210 \u5f00\u53d1\u677f\u4e0a\u7684\u5de5\u5177) \u251c\u2500\u2500 kflash.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.rst \u2514\u2500\u2500 setup.py \u672c\u8282\u6587\u4ef6\u89e3\u6790 bootloader \u6587\u4ef6\u5939\u4e0b rustsbi-qemu.bin os \u6587\u4ef6\u5939\u4e0b ./cargo/config # \u914d\u7f6e\u6587\u4ef6\u6ca1\u6709\u6ce8\u91ca\uff0c \u9ed8\u8ba4 # \u540e\u9762\u63a5\u6ce8\u91ca [build] target = \"riscv64gc-unknown-none-elf\" # \u6307\u5b9a\u76ee\u6807\u5e73\u53f0\uff0c\u4e0d\u7136\u7f16\u8bd1\u65f6\u8981\u5e26\u4e0a\u53c2\u6570 # cargo run --target riscv64gc-unknown-none-elf [target.riscv64gc-unknown-none-elf] rustflags = [ \"-Clink-arg=-Tsrc/linker.ld\", \"-Cforce-frame-pointers=yes\" ] # \u7528\u4e8e\u6307\u5b9a\u94fe\u63a5\u6587\u4ef6\u7684\u5730\u5740 # -T\u540e\u9762\u63a5\u6587\u4ef6\u8def\u5f84 # -Cforce-frame-pointers=yes \u4f30\u8ba1\u662fllvm\u4e2d\u5bf9\u6307\u9488\u7684\u4f18\u5316\u6216\u5176\u4ed6\u5e95\u5c42\u64cd\u4f5c os/Cargo.toml [package] name = \"os\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] # \u6b64\u65f6\u8fd8\u4e0d\u9700\u8981\u914d\u7f6e\u4ec0\u4e48 os/src \u6587\u4ef6\u5939\u4e0b os/src/entry.asm .section .text.entry .global _start _start: la sp, boot_stack_top call rust_main # \u8bbe\u7f6e\u6808\u9876\u4f4d\u7f6e\u540e\u5c06 \u63a7\u5236\u6743\u8f6c\u4ea4\u5230 Rust\u5165\u53e3 .section .bss.stack # \u5173\u4e8e .bss.stack #\u524d\u9762\u6211\u4eec\u63d0\u5230\u8fc7 .bss \u6bb5\u4e00\u822c\u653e\u7f6e\u9700\u8981\u88ab\u521d\u59cb\u5316\u4e3a\u96f6\u7684\u6570\u636e\u3002 #\u7136\u800c\u6808\u5e76\u4e0d\u9700\u8981\u5728\u4f7f\u7528\u524d\u88ab\u521d\u59cb\u5316\u4e3a\u96f6\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u63d2\u5165\u6808\u5e27\u8986\u76d6\u5df2\u6709\u7684\u6570\u636e\u3002 #\u6211\u4eec\u5c1d\u8bd5\u5c06\u5176\u653e\u7f6e\u5230\u5168\u5c40\u6570\u636e .data \u6bb5\u4e2d\u4f46\u6700\u540e\u672a\u80fd\u6210\u529f\uff0c\u56e0\u6b64\u624d\u51b3\u5b9a\u5c06\u5176\u653e\u7f6e\u5230 .bss \u6bb5\u4e2d\u3002 #\u5168\u5c40\u7b26\u53f7 sbss \u548c ebss \u5206\u522b\u6307\u5411 .bss \u6bb5\u9664 .bss.stack \u4ee5\u5916\u7684\u8d77\u59cb\u548c\u7ec8\u6b62\u5730\u5740\uff0c #\u6211\u4eec\u5728\u4f7f\u7528\u8fd9\u90e8\u5206\u6570\u636e\u4e4b\u524d\u9700\u8981\u5c06\u5b83\u4eec\u521d\u59cb\u5316\u4e3a\u96f6 .global boot_stack boot_stack: .space 4096 * 16 #\u9884\u7559\u4e86\u4e00\u5757\u5927\u5c0f\u4e3a 4096 * 16 \u5b57\u8282\u4e5f\u5c31\u662f64KB\u7684\u7a7a\u95f4\u7528\u4f5c\u63a5\u4e0b\u6765\u8981\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u6808\u7a7a\u95f4 .global boot_stack_top boot_stack_top: ## \u6ce8\u610f\uff1a # \u6211\u4eec\u57fa\u672c\u4e0a\u8bf4\u660e\u4e86\u51fd\u6570\u8c03\u7528\u662f\u5982\u4f55\u57fa\u4e8e\u6808\u6765\u5b9e\u73b0\u7684\u3002 #\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u5148\u5ffd\u7565\u6389\u8fd9\u4e9b\u7ec6\u8282\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u53ea\u662f\u9700\u8981\u5728\u521d\u59cb\u5316\u9636\u6bb5\u5b8c\u6210\u6808\u7684\u8bbe\u7f6e\uff0c #\u4e5f\u5c31\u662f\u8bbe\u7f6e\u597d\u6808\u6307\u9488 sp \u5bc4\u5b58\u5668\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u6211\u4eec\u81ea\u52a8\u5b8c\u6210\u540e\u9762\u7684\u51fd\u6570\u8c03\u7528\u76f8\u5173\u673a\u5236\u7684\u4ee3\u7801\u751f\u6210\u3002 #\u9ebb\u70e6\u7684\u662f\uff0c sp \u7684\u503c\u4e5f\u4e0d\u80fd\u968f\u4fbf\u8bbe\u7f6e\uff0c\u81f3\u5c11\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u5b83\u6307\u5411\u5408\u6cd5\u7684\u7269\u7406\u5185\u5b58\uff0c #\u800c\u4e14\u4e0d\u80fd\u4e0e\u7a0b\u5e8f\u7684\u5176\u4ed6\u4ee3\u7801\u3001\u6570\u636e\u6bb5\u76f8\u4ea4\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6808\u533a\u57df\u91cc\u9762\u7684\u5185\u5bb9\u4f1a\u88ab\u4fee\u6539 # \u8fd9\u6bb5\u8bdd\u8bb2\u4e86\u4e3a\u4ec0\u4e48\u8981\u5148\u8bbe\u7f6e\u597dsp\u5bc4\u5b58\u5668 # \u540c\u65f6\u6ce8\u610f\uff0c\u8fd9\u662friscv\u6c47\u7f16\u7684\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\uff0c\u5173\u4e8e\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u662f\u5b58\u5728\u7684 # \u5373\u4ec0\u4e48\u5bc4\u5b58\u5668\u8be5\u4fdd\u7559\u5728\u6808\u4e2d\uff0c\u51fd\u6570\u8c03\u7528\u7684\u6808\u5e27 \u5c31\u5728\u8fd9\u4e2a\u6808\u4e2d # \u53ea\u4e0d\u8fc7rust\u7f16\u8bd1\u5668\u77e5\u9053\u4e86\u76ee\u524d\u5e73\u53f0\u662f riscv\uff0criscv\u7684\u51fd\u6570\u8c03\u7528\u89c4\u8303\u5b83\u77e5\u9053 # \u5b83\u4f1a\u5728\u5185\u90e8\u5bf9\u5bc4\u5b58\u5668\u7684\u4f7f\u7528\u505a\u51fa\u8c03\u6574\uff0c \u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u51fd\u6570\u8c03\u7528\u673a\u5236\u76f8\u5173\u7684\u4ee3\u7801 # \u7b80\u5316\u4e86\u6211\u4eec\u5f00\u53d1\u7684\u6d41\u7a0b os/src/linker.ld # \u94fe\u63a5\u811a\u672c OUTPUT_ARCH(riscv) # \u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u6240\u5728\u7684\u5e73\u53f0 ENTRY(_start) # \u6307\u5b9a\u5165\u53e3\u5730\u5740 # \u5728\u7a0b\u5e8f\u4e2d\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u79f0\u4e3a\u5165\u53e3\u70b9\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 ENTRY \u94fe\u63a5\u5668\u811a\u672c\u547d\u4ee4\u6765\u8bbe\u7f6e\u5165\u53e3\u70b9\u3002 \u53c2\u6570\u662f\u7b26\u53f7\u540d\u79f0 BASE_ADDRESS = 0x80200000; # \u7c7b\u4f3c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf # \u6307\u4ee4\u5185\u6838\u4ece 0x80200000 \u5904\u5f00\u59cb\u5b58\u653e SECTIONS { . = BASE_ADDRESS; skernel = .; stext = .; .text : { *(.text.entry) *(.text .text.*) } # \u5185\u6838\u4ece 0x80200000 \u5f00\u59cb\uff0c # \u6700\u5f00\u65f6\u5b58\u653e\u7684\u662f \u4ee3\u7801\u6bb5\uff0c # \u800c\u4e14\u662f\u6307\u5b9a\u7684 .text.entry \u6bb5 # \u5373 entry.asm \u7684 \u7b2c\u4e00\u4e2a\u4ee3\u7801\u6bb5 # \u5176\u4ed6\u7684\u4ee3\u7801\u6bb5\u4e5f\u5b58\u653e\u5728\u6b64\u5904 . = ALIGN(4K); etext = .; srodata = .; .rodata : { *(.rodata .rodata.*) *(.srodata .srodata.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709\u7684 rodata \u6bb5 . = ALIGN(4K); erodata = .; sdata = .; .data : { *(.data .data.*) *(.sdata .sdata.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709 data \u6bb5 . = ALIGN(4K); edata = .; .bss : { *(.bss.stack) sbss = .; *(.bss .bss.*) *(.sbss .sbss.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709 bss \u6bb5 # \u6ce8\u610f\uff0c\u6709\u4e2a \u7279\u6b8a\u7684\u6808\u6bb5\u4e5f\u5b58\u653e\u5728\u6b64\u5904 # \u5373 .bss.stack \u6bb5 . = ALIGN(4K); ebss = .; ekernel = .; /DISCARD/ : { *(.eh_frame) } } os/src/sbi.rs #![allow(unused)] //\u5e76\u975e\u6240\u6709\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u4f1a\u88ab\u7528\u5230\uff0c\u6240\u4ee5allow(unused) const SBI_SET_TIMER:usize = 0; const SBI_CONSOLE_PUTCHAR:usize = 1; const SBI_CONSOLE_GETCHAR:usize = 2; const SBI_CLEAR_IPI:usize = 3; const SBI_SEND_IPI:usize = 4; const SBI_REMOTE_FENCE_I:usize = 5; const SBI_REMOTE_SFENCE_VMA:usize = 6; const SBI_REMOTE_SFENCE_VMA_ASID:usize = 7; const SBI_SHUTDOWN:usize = 8; // rust-sbi\u63d0\u4f9b\u4e86\u7cfb\u7edf\u8c03\u7528\uff0c /* const LEGACY_SET_TIMER: usize = 0x0; const LEGACY_CONSOLE_PUTCHAR: usize = 0x01; const LEGACY_CONSOLE_GETCHAR: usize = 0x02; // const LEGACY_CLEAR_IPI: usize = 0x03; const LEGACY_SEND_IPI: usize = 0x04; // const LEGACY_REMOTE_FENCE_I: usize = 0x05; // const LEGACY_REMOTE_SFENCE_VMA: usize = 0x06; // const LEGACY_REMOTE_SFENCE_VMA_ASID: usize = 0x07; const LEGACY_SHUTDOWN: usize = 0x08; \u8fd9\u662f rustsbi\u4e2d src/ecall.rs \u7684\u6e90\u7801 */ // \u8fd9\u91cc\u5b9a\u4e49\u7684 8 \u4e2a\u7cfb\u7edf\u8c03\u7528 \u548c rustsbi\u63d0\u4f9b\u7684\u662f\u4e00\u81f4 // \u672c\u8d28\u5c31\u662f\u901a\u8fc7 riscv\u6c47\u7f16 \u7684ecall\u6307\u4ee4\u8c03\u7528 rustsbi\u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528 use core::arch::asm; #[inline(always)] fn sbi_call(which:usize, arg0:usize, arg1:usize, arg2: usize) -> usize{ let mut ret; unsafe{ asm!( \"ecall\", inlateout(\"x10\") arg0 => ret, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which, ); } ret } //\u8fd9\u91cc\u672c\u8d28\u5c31\u662f\u5bf9rustsbi\u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u4e00\u5c42\u5c01\u88c5 pub fn console_putchar(c:usize){ sbi_call(SBI_CONSOLE_PUTCHAR, c, 0, 0); } pub fn shutdown() -> ! { sbi_call(SBI_SHUTDOWN, 0, 0, 0); panic!(\"It should shutdown!\"); } //\u8fdb\u4e00\u6b65\u8fdb\u884c\u5c01\u88c5\uff0c\u7b80\u5316\u8c03\u7528\u7684\u5f62\u5f0f\uff0c\u53ea\u9700\u8981\u5fc5\u8981\u7684\u53c2\u6570 //\u540c\u65f6\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f os/src/console.rs use crate::sbi::console_putchar; use core::fmt::{self, Write}; struct Stdout; //\u7ed3\u6784\u4f53 Stdout \u4e0d\u5305\u542b\u4efb\u4f55\u5b57\u6bb5\uff0c\u56e0\u6b64\u5b83\u88ab\u79f0\u4e3a\u7c7b\u5355\u5143\u7ed3\u6784\u4f53 impl Write for Stdout{ // core::fmt::Write trait \u5305\u542b\u4e00\u4e2a\u7528\u6765\u5b9e\u73b0 println! \u5b8f\u5f88\u597d\u7528\u7684 write_fmt \u65b9\u6cd5\uff0c //\u4e3a\u6b64\u6211\u4eec\u51c6\u5907\u4e3a\u7ed3\u6784\u4f53 Stdout \u5b9e\u73b0 Write trait \u3002 fn write_str(&mut self, s:&str) -> fmt::Result{ //\u5728 Write trait \u4e2d\uff0c write_str \u65b9\u6cd5\u5fc5\u987b\u5b9e\u73b0\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e3a Stdout \u5b9e\u73b0\u8fd9\u4e00\u65b9\u6cd5\uff0c //\u5b83\u5e76\u4e0d\u96be\u5b9e\u73b0\uff0c\u53ea\u9700\u904d\u5386\u4f20\u5165\u7684 &str \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u5e76\u8c03\u7528 console_putchar \u5c31\u80fd\u5c06\u4f20\u5165\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 for c in s.chars(){ console_putchar(c as usize); } Ok(()) } } //\u5728\u6b64\u4e4b\u540e Stdout \u4fbf\u53ef\u8c03\u7528 Write trait \u63d0\u4f9b\u7684 write_fmt \u65b9\u6cd5\u5e76\u8fdb\u800c\u5b9e\u73b0 print \u51fd\u6570\u3002 pub fn print(args: fmt::Arguments){ Stdout.write_fmt(args).unwrap(); } //https://doc.rust-lang.org/core/fmt/trait.Write.html#method.write_fmt //\u5728\u58f0\u660e\u5b8f\uff08Declarative macros\uff09 print! \u548c println! \u4e2d\u4f1a\u8c03\u7528 print \u51fd\u6570\u5b8c\u6210\u8f93\u51fa\u3002 #[macro_export] macro_rules! print{ ($fmt: literal $(, $($arg: tt)+)?) => { $crate::console::print(format_args!($fmt $(, $($arg)+)?)); } } #[macro_export] macro_rules! println{ ($fmt: literal $(, $($arg: tt)+)?) => { $crate::console::print(format_args!(concat!($fmt, \"\\n\") $(, $($arg)+)?)); } } trait\u7684\u5b9e\u73b0\u4ee5\u53ca\u5b8f\u7684\u58f0\u660e\u7b49\u540e\u7eed\u5b66\u5b8crust\u540e\u518d\u56de\u8fc7\u5934\u6765\u770b ------------------------------------------------------------------------- == ------------------------------------------------------------------------------- os/src/lang_items.rs use core::panic::PanicInfo; use crate::sbi::shutdown; #[panic_handler] fn panic(info: &PanicInfo) -> ! { if let Some(location) = info.location() { println!( \"Panicked at {}:{} {}\", location.file(), location.line(), info.message().unwrap() ); } else { println!(\"Panicked: {}\", info.message().unwrap()); } //\u6211\u4eec\u9700\u8981\u5728 main.rs \u5f00\u5934\u52a0\u4e0a #![feature(panic_info_message)] //\u624d\u80fd\u901a\u8fc7 PanicInfo::message \u83b7\u53d6\u62a5\u9519\u4fe1\u606f shutdown() } os/src/main.rs #![no_std] #![no_main] #![feature(panic_info_message)] #[macro_use] mod console; mod lang_items; mod sbi; use core::arch::global_asm; global_asm!(include_str!(\"entry.asm\")); fn clear_bss(){ extern \"C\" { fn sbss(); fn ebss(); //extern \u201cC\u201d \u53ef\u4ee5\u5f15\u7528\u4e00\u4e2a\u5916\u90e8\u7684 C \u51fd\u6570\u63a5\u53e3\uff08\u8fd9\u610f\u5473\u7740\u8c03\u7528\u5b83\u7684\u65f6\u5019\u8981\u9075\u4ece\u76ee\u6807\u5e73\u53f0\u7684 C \u8bed\u8a00\u8c03\u7528\u89c4\u8303\uff09\u3002 //\u4f46\u6211\u4eec\u8fd9\u91cc\u53ea\u662f\u5f15\u7528\u4f4d\u7f6e\u6807\u5fd7\u5e76\u5c06\u5176\u8f6c\u6210 usize \u83b7\u53d6\u5b83\u7684\u5730\u5740\u3002\u7531\u6b64\u53ef\u4ee5\u77e5\u9053 .bss \u6bb5\u4e24\u7aef\u7684\u5730\u5740 } // \u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 linker.ld \u6587\u4ef6\u4e2d\u6bb5\u7684\u5730\u5740 (sbss as usize..ebss as usize).for_each(|a| { unsafe { (a as *mut u8).write_volatile(0)} }); // Rust \u7684\u8fed\u4ee3\u5668\u548c\u95ed\u5305\uff0c\u540e\u7eed\u518d\u4e86\u89e3 } #[no_mangle] pub fn rust_main() -> ! { clear_bss(); println!(\"Hello, world\"); panic!(\"Shutdown machine!\"); } \u5173\u4e8ePanicInfo\u7684\u4f7f\u7528\u8fd8\u6709\u5f85\u4e86\u89e3 \u4e3a\u4ec0\u4e48panic!(\"Shutdown machine!\") \u53ef\u4ee5\u6253\u5370\u51fa\u6765\uff0c\u4f46shut down() \u7684panic!(\"It should shutdown!\")\u6ca1\u6709\u88ab\u6253\u5370\u4e86 \u65e2\u7136\u5df2\u7ecf\u8981\u5173\u673a\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u5199\u53e5\u8bdd\uff1apanic!(\"It should shutdown!\") \u6267\u884c\u6d41\u7a0b \u8fdb\u5165entr.asm\uff0c\u8bbe\u7f6e\u51fd\u6570\u6808\uff0c\u8df3\u8f6c\u5230 rust_main \u6e05\u96f6\u9664.bss.stack\u4ee5\u5916\u7684.bss\u6bb5 \u8c03\u7528println! -> print -> Stdout.write_fmt \u8c03\u7528 painc! -> println! -> shutdown -> sbi_call(SBI_SHUTDOWN, 0, 0, 0)","title":"\u8f93\u51fahello_world"},{"location":"ch1hello/#hello-world","text":"","title":"\u8f93\u51fahello world"},{"location":"ch1hello/#_1","text":"","title":"\u5185\u6838\u7b2c\u4e00\u6761\u6307\u4ee4"},{"location":"ch1hello/#_2","text":"./os/src Rust 4 Files 119 Lines Assembly 1 Files 11 Lines \u251c\u2500\u2500 bootloader(\u5185\u6838\u4f9d\u8d56\u7684\u8fd0\u884c\u5728 M \u7279\u6743\u7ea7\u7684 SBI \u5b9e\u73b0\uff0c\u672c\u9879\u76ee\u4e2d\u6211\u4eec\u4f7f\u7528 RustSBI) \u2502 \u251c\u2500\u2500 rustsbi-k210.bin(\u53ef\u8fd0\u884c\u5728 k210 \u771f\u5b9e\u786c\u4ef6\u5e73\u53f0\u4e0a\u7684\u9884\u7f16\u8bd1\u4e8c\u8fdb\u5236\u7248\u672c) \u2502 \u2514\u2500\u2500 rustsbi-qemu.bin(\u53ef\u8fd0\u884c\u5728 qemu \u865a\u62df\u673a\u4e0a\u7684\u9884\u7f16\u8bd1\u4e8c\u8fdb\u5236\u7248\u672c) \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 os(\u6211\u4eec\u7684\u5185\u6838\u5b9e\u73b0\u653e\u5728 os \u76ee\u5f55\u4e0b) \u2502 \u251c\u2500\u2500 Cargo.toml(\u5185\u6838\u5b9e\u73b0\u7684\u4e00\u4e9b\u914d\u7f6e\u6587\u4ef6) \u2502 \u251c\u2500\u2500 Makefile \u2502 \u2514\u2500\u2500 src(\u6240\u6709\u5185\u6838\u7684\u6e90\u4ee3\u7801\u653e\u5728 os/src \u76ee\u5f55\u4e0b) \u2502 \u251c\u2500\u2500 console.rs(\u5c06\u6253\u5370\u5b57\u7b26\u7684 SBI \u63a5\u53e3\u8fdb\u4e00\u6b65\u5c01\u88c5\u5b9e\u73b0\u66f4\u52a0\u5f3a\u5927\u7684\u683c\u5f0f\u5316\u8f93\u51fa) \u2502 \u251c\u2500\u2500 entry.asm(\u8bbe\u7f6e\u5185\u6838\u6267\u884c\u73af\u5883\u7684\u7684\u4e00\u6bb5\u6c47\u7f16\u4ee3\u7801) \u2502 \u251c\u2500\u2500 lang_items.rs(\u9700\u8981\u6211\u4eec\u63d0\u4f9b\u7ed9 Rust \u7f16\u8bd1\u5668\u7684\u4e00\u4e9b\u8bed\u4e49\u9879\uff0c\u76ee\u524d\u5305\u542b\u5185\u6838 panic \u65f6\u7684\u5904\u7406\u903b\u8f91) \u2502 \u251c\u2500\u2500 linker-k210.ld(\u63a7\u5236\u5185\u6838\u5185\u5b58\u5e03\u5c40\u7684\u94fe\u63a5\u811a\u672c\u4ee5\u4f7f\u5185\u6838\u8fd0\u884c\u5728 k210 \u771f\u5b9e\u786c\u4ef6\u5e73\u53f0\u4e0a) \u2502 \u251c\u2500\u2500 linker-qemu.ld(\u63a7\u5236\u5185\u6838\u5185\u5b58\u5e03\u5c40\u7684\u94fe\u63a5\u811a\u672c\u4ee5\u4f7f\u5185\u6838\u8fd0\u884c\u5728 qemu \u865a\u62df\u673a\u4e0a) \u2502 \u251c\u2500\u2500 main.rs(\u5185\u6838\u4e3b\u51fd\u6570) \u2502 \u2514\u2500\u2500 sbi.rs(\u8c03\u7528\u5e95\u5c42 SBI \u5b9e\u73b0\u63d0\u4f9b\u7684 SBI \u63a5\u53e3) \u251c\u2500\u2500 README.md \u251c\u2500\u2500 rust-toolchain(\u63a7\u5236\u6574\u4e2a\u9879\u76ee\u7684\u5de5\u5177\u94fe\u7248\u672c) \u2514\u2500\u2500 tools(\u81ea\u52a8\u4e0b\u8f7d\u7684\u5c06\u5185\u6838\u70e7\u5199\u5230 k210 \u5f00\u53d1\u677f\u4e0a\u7684\u5de5\u5177) \u251c\u2500\u2500 kflash.py \u251c\u2500\u2500 LICENSE \u251c\u2500\u2500 package.json \u251c\u2500\u2500 README.rst \u2514\u2500\u2500 setup.py","title":"\u7b2c\u4e00\u7ae0\u4ee3\u7801\u6811"},{"location":"ch1hello/#_3","text":"","title":"\u672c\u8282\u6587\u4ef6\u89e3\u6790"},{"location":"ch1hello/#bootloader","text":"rustsbi-qemu.bin","title":"bootloader \u6587\u4ef6\u5939\u4e0b"},{"location":"ch1hello/#os","text":"./cargo/config # \u914d\u7f6e\u6587\u4ef6\u6ca1\u6709\u6ce8\u91ca\uff0c \u9ed8\u8ba4 # \u540e\u9762\u63a5\u6ce8\u91ca [build] target = \"riscv64gc-unknown-none-elf\" # \u6307\u5b9a\u76ee\u6807\u5e73\u53f0\uff0c\u4e0d\u7136\u7f16\u8bd1\u65f6\u8981\u5e26\u4e0a\u53c2\u6570 # cargo run --target riscv64gc-unknown-none-elf [target.riscv64gc-unknown-none-elf] rustflags = [ \"-Clink-arg=-Tsrc/linker.ld\", \"-Cforce-frame-pointers=yes\" ] # \u7528\u4e8e\u6307\u5b9a\u94fe\u63a5\u6587\u4ef6\u7684\u5730\u5740 # -T\u540e\u9762\u63a5\u6587\u4ef6\u8def\u5f84 # -Cforce-frame-pointers=yes \u4f30\u8ba1\u662fllvm\u4e2d\u5bf9\u6307\u9488\u7684\u4f18\u5316\u6216\u5176\u4ed6\u5e95\u5c42\u64cd\u4f5c os/Cargo.toml [package] name = \"os\" version = \"0.1.0\" edition = \"2021\" # See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html [dependencies] # \u6b64\u65f6\u8fd8\u4e0d\u9700\u8981\u914d\u7f6e\u4ec0\u4e48","title":"os \u6587\u4ef6\u5939\u4e0b"},{"location":"ch1hello/#ossrc","text":"os/src/entry.asm .section .text.entry .global _start _start: la sp, boot_stack_top call rust_main # \u8bbe\u7f6e\u6808\u9876\u4f4d\u7f6e\u540e\u5c06 \u63a7\u5236\u6743\u8f6c\u4ea4\u5230 Rust\u5165\u53e3 .section .bss.stack # \u5173\u4e8e .bss.stack #\u524d\u9762\u6211\u4eec\u63d0\u5230\u8fc7 .bss \u6bb5\u4e00\u822c\u653e\u7f6e\u9700\u8981\u88ab\u521d\u59cb\u5316\u4e3a\u96f6\u7684\u6570\u636e\u3002 #\u7136\u800c\u6808\u5e76\u4e0d\u9700\u8981\u5728\u4f7f\u7528\u524d\u88ab\u521d\u59cb\u5316\u4e3a\u96f6\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u65f6\u5019\u6211\u4eec\u4f1a\u63d2\u5165\u6808\u5e27\u8986\u76d6\u5df2\u6709\u7684\u6570\u636e\u3002 #\u6211\u4eec\u5c1d\u8bd5\u5c06\u5176\u653e\u7f6e\u5230\u5168\u5c40\u6570\u636e .data \u6bb5\u4e2d\u4f46\u6700\u540e\u672a\u80fd\u6210\u529f\uff0c\u56e0\u6b64\u624d\u51b3\u5b9a\u5c06\u5176\u653e\u7f6e\u5230 .bss \u6bb5\u4e2d\u3002 #\u5168\u5c40\u7b26\u53f7 sbss \u548c ebss \u5206\u522b\u6307\u5411 .bss \u6bb5\u9664 .bss.stack \u4ee5\u5916\u7684\u8d77\u59cb\u548c\u7ec8\u6b62\u5730\u5740\uff0c #\u6211\u4eec\u5728\u4f7f\u7528\u8fd9\u90e8\u5206\u6570\u636e\u4e4b\u524d\u9700\u8981\u5c06\u5b83\u4eec\u521d\u59cb\u5316\u4e3a\u96f6 .global boot_stack boot_stack: .space 4096 * 16 #\u9884\u7559\u4e86\u4e00\u5757\u5927\u5c0f\u4e3a 4096 * 16 \u5b57\u8282\u4e5f\u5c31\u662f64KB\u7684\u7a7a\u95f4\u7528\u4f5c\u63a5\u4e0b\u6765\u8981\u8fd0\u884c\u7684\u7a0b\u5e8f\u7684\u6808\u7a7a\u95f4 .global boot_stack_top boot_stack_top: ## \u6ce8\u610f\uff1a # \u6211\u4eec\u57fa\u672c\u4e0a\u8bf4\u660e\u4e86\u51fd\u6570\u8c03\u7528\u662f\u5982\u4f55\u57fa\u4e8e\u6808\u6765\u5b9e\u73b0\u7684\u3002 #\u4e0d\u8fc7\u6211\u4eec\u53ef\u4ee5\u6682\u65f6\u5148\u5ffd\u7565\u6389\u8fd9\u4e9b\u7ec6\u8282\uff0c\u56e0\u4e3a\u6211\u4eec\u73b0\u5728\u53ea\u662f\u9700\u8981\u5728\u521d\u59cb\u5316\u9636\u6bb5\u5b8c\u6210\u6808\u7684\u8bbe\u7f6e\uff0c #\u4e5f\u5c31\u662f\u8bbe\u7f6e\u597d\u6808\u6307\u9488 sp \u5bc4\u5b58\u5668\uff0c\u7f16\u8bd1\u5668\u4f1a\u5e2e\u6211\u4eec\u81ea\u52a8\u5b8c\u6210\u540e\u9762\u7684\u51fd\u6570\u8c03\u7528\u76f8\u5173\u673a\u5236\u7684\u4ee3\u7801\u751f\u6210\u3002 #\u9ebb\u70e6\u7684\u662f\uff0c sp \u7684\u503c\u4e5f\u4e0d\u80fd\u968f\u4fbf\u8bbe\u7f6e\uff0c\u81f3\u5c11\u6211\u4eec\u9700\u8981\u4fdd\u8bc1\u5b83\u6307\u5411\u5408\u6cd5\u7684\u7269\u7406\u5185\u5b58\uff0c #\u800c\u4e14\u4e0d\u80fd\u4e0e\u7a0b\u5e8f\u7684\u5176\u4ed6\u4ee3\u7801\u3001\u6570\u636e\u6bb5\u76f8\u4ea4\uff0c\u56e0\u4e3a\u5728\u51fd\u6570\u8c03\u7528\u7684\u8fc7\u7a0b\u4e2d\uff0c\u6808\u533a\u57df\u91cc\u9762\u7684\u5185\u5bb9\u4f1a\u88ab\u4fee\u6539 # \u8fd9\u6bb5\u8bdd\u8bb2\u4e86\u4e3a\u4ec0\u4e48\u8981\u5148\u8bbe\u7f6e\u597dsp\u5bc4\u5b58\u5668 # \u540c\u65f6\u6ce8\u610f\uff0c\u8fd9\u662friscv\u6c47\u7f16\u7684\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\uff0c\u5173\u4e8e\u51fd\u6570\u8c03\u7528\u7ea6\u5b9a\u662f\u5b58\u5728\u7684 # \u5373\u4ec0\u4e48\u5bc4\u5b58\u5668\u8be5\u4fdd\u7559\u5728\u6808\u4e2d\uff0c\u51fd\u6570\u8c03\u7528\u7684\u6808\u5e27 \u5c31\u5728\u8fd9\u4e2a\u6808\u4e2d # \u53ea\u4e0d\u8fc7rust\u7f16\u8bd1\u5668\u77e5\u9053\u4e86\u76ee\u524d\u5e73\u53f0\u662f riscv\uff0criscv\u7684\u51fd\u6570\u8c03\u7528\u89c4\u8303\u5b83\u77e5\u9053 # \u5b83\u4f1a\u5728\u5185\u90e8\u5bf9\u5bc4\u5b58\u5668\u7684\u4f7f\u7528\u505a\u51fa\u8c03\u6574\uff0c \u7f16\u8bd1\u5668\u81ea\u52a8\u751f\u6210\u51fd\u6570\u8c03\u7528\u673a\u5236\u76f8\u5173\u7684\u4ee3\u7801 # \u7b80\u5316\u4e86\u6211\u4eec\u5f00\u53d1\u7684\u6d41\u7a0b os/src/linker.ld # \u94fe\u63a5\u811a\u672c OUTPUT_ARCH(riscv) # \u6307\u5b9a\u76ee\u6807\u6587\u4ef6\u6240\u5728\u7684\u5e73\u53f0 ENTRY(_start) # \u6307\u5b9a\u5165\u53e3\u5730\u5740 # \u5728\u7a0b\u5e8f\u4e2d\u6267\u884c\u7684\u7b2c\u4e00\u6761\u6307\u4ee4\u79f0\u4e3a\u5165\u53e3\u70b9\u3002 \u60a8\u53ef\u4ee5\u4f7f\u7528 ENTRY \u94fe\u63a5\u5668\u811a\u672c\u547d\u4ee4\u6765\u8bbe\u7f6e\u5165\u53e3\u70b9\u3002 \u53c2\u6570\u662f\u7b26\u53f7\u540d\u79f0 BASE_ADDRESS = 0x80200000; # \u7c7b\u4f3c\u4e00\u4e2a\u5168\u5c40\u53d8\u91cf # \u6307\u4ee4\u5185\u6838\u4ece 0x80200000 \u5904\u5f00\u59cb\u5b58\u653e SECTIONS { . = BASE_ADDRESS; skernel = .; stext = .; .text : { *(.text.entry) *(.text .text.*) } # \u5185\u6838\u4ece 0x80200000 \u5f00\u59cb\uff0c # \u6700\u5f00\u65f6\u5b58\u653e\u7684\u662f \u4ee3\u7801\u6bb5\uff0c # \u800c\u4e14\u662f\u6307\u5b9a\u7684 .text.entry \u6bb5 # \u5373 entry.asm \u7684 \u7b2c\u4e00\u4e2a\u4ee3\u7801\u6bb5 # \u5176\u4ed6\u7684\u4ee3\u7801\u6bb5\u4e5f\u5b58\u653e\u5728\u6b64\u5904 . = ALIGN(4K); etext = .; srodata = .; .rodata : { *(.rodata .rodata.*) *(.srodata .srodata.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709\u7684 rodata \u6bb5 . = ALIGN(4K); erodata = .; sdata = .; .data : { *(.data .data.*) *(.sdata .sdata.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709 data \u6bb5 . = ALIGN(4K); edata = .; .bss : { *(.bss.stack) sbss = .; *(.bss .bss.*) *(.sbss .sbss.*) } # \u6b64\u5904\u5b58\u653e\u6240\u6709 bss \u6bb5 # \u6ce8\u610f\uff0c\u6709\u4e2a \u7279\u6b8a\u7684\u6808\u6bb5\u4e5f\u5b58\u653e\u5728\u6b64\u5904 # \u5373 .bss.stack \u6bb5 . = ALIGN(4K); ebss = .; ekernel = .; /DISCARD/ : { *(.eh_frame) } } os/src/sbi.rs #![allow(unused)] //\u5e76\u975e\u6240\u6709\u7684\u7cfb\u7edf\u8c03\u7528\u90fd\u4f1a\u88ab\u7528\u5230\uff0c\u6240\u4ee5allow(unused) const SBI_SET_TIMER:usize = 0; const SBI_CONSOLE_PUTCHAR:usize = 1; const SBI_CONSOLE_GETCHAR:usize = 2; const SBI_CLEAR_IPI:usize = 3; const SBI_SEND_IPI:usize = 4; const SBI_REMOTE_FENCE_I:usize = 5; const SBI_REMOTE_SFENCE_VMA:usize = 6; const SBI_REMOTE_SFENCE_VMA_ASID:usize = 7; const SBI_SHUTDOWN:usize = 8; // rust-sbi\u63d0\u4f9b\u4e86\u7cfb\u7edf\u8c03\u7528\uff0c /* const LEGACY_SET_TIMER: usize = 0x0; const LEGACY_CONSOLE_PUTCHAR: usize = 0x01; const LEGACY_CONSOLE_GETCHAR: usize = 0x02; // const LEGACY_CLEAR_IPI: usize = 0x03; const LEGACY_SEND_IPI: usize = 0x04; // const LEGACY_REMOTE_FENCE_I: usize = 0x05; // const LEGACY_REMOTE_SFENCE_VMA: usize = 0x06; // const LEGACY_REMOTE_SFENCE_VMA_ASID: usize = 0x07; const LEGACY_SHUTDOWN: usize = 0x08; \u8fd9\u662f rustsbi\u4e2d src/ecall.rs \u7684\u6e90\u7801 */ // \u8fd9\u91cc\u5b9a\u4e49\u7684 8 \u4e2a\u7cfb\u7edf\u8c03\u7528 \u548c rustsbi\u63d0\u4f9b\u7684\u662f\u4e00\u81f4 // \u672c\u8d28\u5c31\u662f\u901a\u8fc7 riscv\u6c47\u7f16 \u7684ecall\u6307\u4ee4\u8c03\u7528 rustsbi\u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528 use core::arch::asm; #[inline(always)] fn sbi_call(which:usize, arg0:usize, arg1:usize, arg2: usize) -> usize{ let mut ret; unsafe{ asm!( \"ecall\", inlateout(\"x10\") arg0 => ret, in(\"x11\") arg1, in(\"x12\") arg2, in(\"x17\") which, ); } ret } //\u8fd9\u91cc\u672c\u8d28\u5c31\u662f\u5bf9rustsbi\u63d0\u4f9b\u7684\u7cfb\u7edf\u8c03\u7528\u7684\u4e00\u5c42\u5c01\u88c5 pub fn console_putchar(c:usize){ sbi_call(SBI_CONSOLE_PUTCHAR, c, 0, 0); } pub fn shutdown() -> ! { sbi_call(SBI_SHUTDOWN, 0, 0, 0); panic!(\"It should shutdown!\"); } //\u8fdb\u4e00\u6b65\u8fdb\u884c\u5c01\u88c5\uff0c\u7b80\u5316\u8c03\u7528\u7684\u5f62\u5f0f\uff0c\u53ea\u9700\u8981\u5fc5\u8981\u7684\u53c2\u6570 //\u540c\u65f6\u4e5f\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u989d\u5916\u7684\u4fe1\u606f os/src/console.rs use crate::sbi::console_putchar; use core::fmt::{self, Write}; struct Stdout; //\u7ed3\u6784\u4f53 Stdout \u4e0d\u5305\u542b\u4efb\u4f55\u5b57\u6bb5\uff0c\u56e0\u6b64\u5b83\u88ab\u79f0\u4e3a\u7c7b\u5355\u5143\u7ed3\u6784\u4f53 impl Write for Stdout{ // core::fmt::Write trait \u5305\u542b\u4e00\u4e2a\u7528\u6765\u5b9e\u73b0 println! \u5b8f\u5f88\u597d\u7528\u7684 write_fmt \u65b9\u6cd5\uff0c //\u4e3a\u6b64\u6211\u4eec\u51c6\u5907\u4e3a\u7ed3\u6784\u4f53 Stdout \u5b9e\u73b0 Write trait \u3002 fn write_str(&mut self, s:&str) -> fmt::Result{ //\u5728 Write trait \u4e2d\uff0c write_str \u65b9\u6cd5\u5fc5\u987b\u5b9e\u73b0\uff0c\u56e0\u6b64\u6211\u4eec\u9700\u8981\u4e3a Stdout \u5b9e\u73b0\u8fd9\u4e00\u65b9\u6cd5\uff0c //\u5b83\u5e76\u4e0d\u96be\u5b9e\u73b0\uff0c\u53ea\u9700\u904d\u5386\u4f20\u5165\u7684 &str \u4e2d\u7684\u6bcf\u4e2a\u5b57\u7b26\u5e76\u8c03\u7528 console_putchar \u5c31\u80fd\u5c06\u4f20\u5165\u7684\u6574\u4e2a\u5b57\u7b26\u4e32\u6253\u5370\u5230\u5c4f\u5e55\u4e0a\u3002 for c in s.chars(){ console_putchar(c as usize); } Ok(()) } } //\u5728\u6b64\u4e4b\u540e Stdout \u4fbf\u53ef\u8c03\u7528 Write trait \u63d0\u4f9b\u7684 write_fmt \u65b9\u6cd5\u5e76\u8fdb\u800c\u5b9e\u73b0 print \u51fd\u6570\u3002 pub fn print(args: fmt::Arguments){ Stdout.write_fmt(args).unwrap(); } //https://doc.rust-lang.org/core/fmt/trait.Write.html#method.write_fmt //\u5728\u58f0\u660e\u5b8f\uff08Declarative macros\uff09 print! \u548c println! \u4e2d\u4f1a\u8c03\u7528 print \u51fd\u6570\u5b8c\u6210\u8f93\u51fa\u3002 #[macro_export] macro_rules! print{ ($fmt: literal $(, $($arg: tt)+)?) => { $crate::console::print(format_args!($fmt $(, $($arg)+)?)); } } #[macro_export] macro_rules! println{ ($fmt: literal $(, $($arg: tt)+)?) => { $crate::console::print(format_args!(concat!($fmt, \"\\n\") $(, $($arg)+)?)); } } trait\u7684\u5b9e\u73b0\u4ee5\u53ca\u5b8f\u7684\u58f0\u660e\u7b49\u540e\u7eed\u5b66\u5b8crust\u540e\u518d\u56de\u8fc7\u5934\u6765\u770b ------------------------------------------------------------------------- == ------------------------------------------------------------------------------- os/src/lang_items.rs use core::panic::PanicInfo; use crate::sbi::shutdown; #[panic_handler] fn panic(info: &PanicInfo) -> ! { if let Some(location) = info.location() { println!( \"Panicked at {}:{} {}\", location.file(), location.line(), info.message().unwrap() ); } else { println!(\"Panicked: {}\", info.message().unwrap()); } //\u6211\u4eec\u9700\u8981\u5728 main.rs \u5f00\u5934\u52a0\u4e0a #![feature(panic_info_message)] //\u624d\u80fd\u901a\u8fc7 PanicInfo::message \u83b7\u53d6\u62a5\u9519\u4fe1\u606f shutdown() } os/src/main.rs #![no_std] #![no_main] #![feature(panic_info_message)] #[macro_use] mod console; mod lang_items; mod sbi; use core::arch::global_asm; global_asm!(include_str!(\"entry.asm\")); fn clear_bss(){ extern \"C\" { fn sbss(); fn ebss(); //extern \u201cC\u201d \u53ef\u4ee5\u5f15\u7528\u4e00\u4e2a\u5916\u90e8\u7684 C \u51fd\u6570\u63a5\u53e3\uff08\u8fd9\u610f\u5473\u7740\u8c03\u7528\u5b83\u7684\u65f6\u5019\u8981\u9075\u4ece\u76ee\u6807\u5e73\u53f0\u7684 C \u8bed\u8a00\u8c03\u7528\u89c4\u8303\uff09\u3002 //\u4f46\u6211\u4eec\u8fd9\u91cc\u53ea\u662f\u5f15\u7528\u4f4d\u7f6e\u6807\u5fd7\u5e76\u5c06\u5176\u8f6c\u6210 usize \u83b7\u53d6\u5b83\u7684\u5730\u5740\u3002\u7531\u6b64\u53ef\u4ee5\u77e5\u9053 .bss \u6bb5\u4e24\u7aef\u7684\u5730\u5740 } // \u901a\u8fc7\u8fd9\u79cd\u65b9\u6cd5\uff0c\u6211\u4eec\u53ef\u4ee5\u83b7\u53d6 linker.ld \u6587\u4ef6\u4e2d\u6bb5\u7684\u5730\u5740 (sbss as usize..ebss as usize).for_each(|a| { unsafe { (a as *mut u8).write_volatile(0)} }); // Rust \u7684\u8fed\u4ee3\u5668\u548c\u95ed\u5305\uff0c\u540e\u7eed\u518d\u4e86\u89e3 } #[no_mangle] pub fn rust_main() -> ! { clear_bss(); println!(\"Hello, world\"); panic!(\"Shutdown machine!\"); } \u5173\u4e8ePanicInfo\u7684\u4f7f\u7528\u8fd8\u6709\u5f85\u4e86\u89e3 \u4e3a\u4ec0\u4e48panic!(\"Shutdown machine!\") \u53ef\u4ee5\u6253\u5370\u51fa\u6765\uff0c\u4f46shut down() \u7684panic!(\"It should shutdown!\")\u6ca1\u6709\u88ab\u6253\u5370\u4e86 \u65e2\u7136\u5df2\u7ecf\u8981\u5173\u673a\u4e86\uff0c\u4e3a\u4ec0\u4e48\u8fd8\u8981\u5199\u53e5\u8bdd\uff1apanic!(\"It should shutdown!\")","title":"os/src \u6587\u4ef6\u5939\u4e0b"},{"location":"ch1hello/#_4","text":"\u8fdb\u5165entr.asm\uff0c\u8bbe\u7f6e\u51fd\u6570\u6808\uff0c\u8df3\u8f6c\u5230 rust_main \u6e05\u96f6\u9664.bss.stack\u4ee5\u5916\u7684.bss\u6bb5 \u8c03\u7528println! -> print -> Stdout.write_fmt \u8c03\u7528 painc! -> println! -> shutdown -> sbi_call(SBI_SHUTDOWN, 0, 0, 0)","title":"\u6267\u884c\u6d41\u7a0b"},{"location":"ch1run/","text":"\u8fd0\u884c\u6307\u4ee4 \u751f\u6210\u5185\u6838\u53ef\u6267\u884c\u6587\u4ef6 cargo build --release file target/riscv64gc-unknown-none-elf/release/os \u624b\u52a8\u52a0\u8f7d\u5185\u6838\u53ef\u6267\u884c\u6587\u4ef6 rust-objcopy --strip-all target/riscv64gc-unknown-none-elf/release/os -O binary target/riscv64gc-unknown-none-elf/release/os.bin \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 stat \u5de5\u5177\u6765\u6bd4\u8f83\u5185\u6838\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5185\u6838\u955c\u50cf\u7684\u5927\u5c0f\uff1a stat target/riscv64gc-unknown-none-elf/release/os stat target/riscv64gc-unknown-none-elf/release/os.bin \u57fa\u4e8eGDB\u9a8c\u8bc1\u542f\u52a8\u6d41\u7a0b qemu-system-riscv64 \\ -machine virt \\ -nographic \\ -bios ../bootloader/rustsbi-qemu.bin \\ -device loader,file=target/riscv64gc-unknown-none-elf/release/os.bin,addr=0x80200000 \\ -s -S -s \u53ef\u4ee5\u4f7f Qemu \u76d1\u542c\u672c\u5730 TCP \u7aef\u53e3 1234 \u7b49\u5f85 GDB \u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u800c -S \u53ef\u4ee5\u4f7f Qemu \u5728\u6536\u5230 GDB \u7684\u8bf7\u6c42\u540e\u518d\u5f00\u59cb\u8fd0\u884c\u3002\u56e0\u6b64\uff0cQemu \u6682\u65f6\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\u3002 \u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\uff0c\u542f\u52a8\u4e00\u4e2a GDB \u5ba2\u6237\u7aef\u8fde\u63a5\u5230 Qemu \uff1a riscv64-unknown-elf-gdb \\ -ex 'file target/riscv64gc-unknown-none-elf/release/os' \\ -ex 'set arch riscv:rv64' \\ -ex 'target remote localhost:1234' b *0x80200000 c x/10i $pc GBD\u6307\u4ee4 \u8fd9\u91cc x/10i $pc \u7684\u542b\u4e49\u662f\u4ece\u5f53\u524d PC \u503c\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5728\u5185\u5b58\u4e2d\u53cd\u6c47\u7f16 10 \u6761\u6307\u4ee4 si \u53ef\u4ee5\u8ba9 Qemu \u6bcf\u6b21\u5411\u4e0b\u6267\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u4e4b\u540e\u5c4f\u5e55\u4f1a\u6253\u5370\u51fa\u5f85\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 p/x $t0 \u4ee5 16 \u8fdb\u5236\u6253\u5370\u5bc4\u5b58\u5668 t0 \u7684\u503c\uff0c\u6ce8\u610f\u5f53\u6211\u4eec\u8981\u6253\u5370\u5bc4\u5b58\u5668\u7684\u65f6\u5019\u9700\u8981\u5728\u5bc4\u5b58\u5668\u7684\u540d\u5b57\u524d\u9762\u52a0\u4e0a $ \u6211\u4eec\u5728\u5185\u6838\u7684\u5165\u53e3\u70b9\uff0c\u4e5f\u5373\u5730\u5740 0x80200000 \u5904\u6253\u4e00\u4e2a\u65ad\u70b9\u3002\u9700\u8981\u6ce8\u610f\uff0c\u5f53\u9700\u8981\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u5730\u5740\u6253\u65ad\u70b9\u65f6\uff0c\u9700\u8981\u5728\u5730\u5740\u524d\u9762\u52a0\u4e0a ` \u3002\u63a5\u4e0b\u6765\u901a\u8fc7 c` \u547d\u4ee4\uff08Continue \u7684\u7f29\u5199\uff09\u8ba9 Qemu \u5411\u4e0b\u8fd0\u884c\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u65ad\u70b9 p/d $x1 \u53ef\u4ee5\u4ee5\u5341\u8fdb\u5236\u6253\u5370\u5bc4\u5b58\u5668 x1 \u7684\u503c\uff0c\u5b83\u7684\u7ed3\u679c\u6b63\u786e","title":"\u8fd0\u884c\u6307\u4ee4.md"},{"location":"ch1run/#_1","text":"","title":"\u8fd0\u884c\u6307\u4ee4"},{"location":"ch1run/#_2","text":"cargo build --release file target/riscv64gc-unknown-none-elf/release/os","title":"\u751f\u6210\u5185\u6838\u53ef\u6267\u884c\u6587\u4ef6"},{"location":"ch1run/#_3","text":"rust-objcopy --strip-all target/riscv64gc-unknown-none-elf/release/os -O binary target/riscv64gc-unknown-none-elf/release/os.bin \u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 stat \u5de5\u5177\u6765\u6bd4\u8f83\u5185\u6838\u53ef\u6267\u884c\u6587\u4ef6\u548c\u5185\u6838\u955c\u50cf\u7684\u5927\u5c0f\uff1a stat target/riscv64gc-unknown-none-elf/release/os stat target/riscv64gc-unknown-none-elf/release/os.bin","title":"\u624b\u52a8\u52a0\u8f7d\u5185\u6838\u53ef\u6267\u884c\u6587\u4ef6"},{"location":"ch1run/#gdb","text":"qemu-system-riscv64 \\ -machine virt \\ -nographic \\ -bios ../bootloader/rustsbi-qemu.bin \\ -device loader,file=target/riscv64gc-unknown-none-elf/release/os.bin,addr=0x80200000 \\ -s -S -s \u53ef\u4ee5\u4f7f Qemu \u76d1\u542c\u672c\u5730 TCP \u7aef\u53e3 1234 \u7b49\u5f85 GDB \u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u800c -S \u53ef\u4ee5\u4f7f Qemu \u5728\u6536\u5230 GDB \u7684\u8bf7\u6c42\u540e\u518d\u5f00\u59cb\u8fd0\u884c\u3002\u56e0\u6b64\uff0cQemu \u6682\u65f6\u6ca1\u6709\u4efb\u4f55\u8f93\u51fa\u3002 \u6253\u5f00\u53e6\u4e00\u4e2a\u7ec8\u7aef\uff0c\u542f\u52a8\u4e00\u4e2a GDB \u5ba2\u6237\u7aef\u8fde\u63a5\u5230 Qemu \uff1a riscv64-unknown-elf-gdb \\ -ex 'file target/riscv64gc-unknown-none-elf/release/os' \\ -ex 'set arch riscv:rv64' \\ -ex 'target remote localhost:1234' b *0x80200000 c x/10i $pc","title":"\u57fa\u4e8eGDB\u9a8c\u8bc1\u542f\u52a8\u6d41\u7a0b"},{"location":"ch1run/#gbd","text":"\u8fd9\u91cc x/10i $pc \u7684\u542b\u4e49\u662f\u4ece\u5f53\u524d PC \u503c\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u5728\u5185\u5b58\u4e2d\u53cd\u6c47\u7f16 10 \u6761\u6307\u4ee4 si \u53ef\u4ee5\u8ba9 Qemu \u6bcf\u6b21\u5411\u4e0b\u6267\u884c\u4e00\u6761\u6307\u4ee4\uff0c\u4e4b\u540e\u5c4f\u5e55\u4f1a\u6253\u5370\u51fa\u5f85\u6267\u884c\u7684\u4e0b\u4e00\u6761\u6307\u4ee4\u7684\u5730\u5740 p/x $t0 \u4ee5 16 \u8fdb\u5236\u6253\u5370\u5bc4\u5b58\u5668 t0 \u7684\u503c\uff0c\u6ce8\u610f\u5f53\u6211\u4eec\u8981\u6253\u5370\u5bc4\u5b58\u5668\u7684\u65f6\u5019\u9700\u8981\u5728\u5bc4\u5b58\u5668\u7684\u540d\u5b57\u524d\u9762\u52a0\u4e0a $ \u6211\u4eec\u5728\u5185\u6838\u7684\u5165\u53e3\u70b9\uff0c\u4e5f\u5373\u5730\u5740 0x80200000 \u5904\u6253\u4e00\u4e2a\u65ad\u70b9\u3002\u9700\u8981\u6ce8\u610f\uff0c\u5f53\u9700\u8981\u5728\u4e00\u4e2a\u7279\u5b9a\u7684\u5730\u5740\u6253\u65ad\u70b9\u65f6\uff0c\u9700\u8981\u5728\u5730\u5740\u524d\u9762\u52a0\u4e0a ` \u3002\u63a5\u4e0b\u6765\u901a\u8fc7 c` \u547d\u4ee4\uff08Continue \u7684\u7f29\u5199\uff09\u8ba9 Qemu \u5411\u4e0b\u8fd0\u884c\u76f4\u5230\u9047\u5230\u4e00\u4e2a\u65ad\u70b9 p/d $x1 \u53ef\u4ee5\u4ee5\u5341\u8fdb\u5236\u6253\u5370\u5bc4\u5b58\u5668 x1 \u7684\u503c\uff0c\u5b83\u7684\u7ed3\u679c\u6b63\u786e","title":"GBD\u6307\u4ee4"}]}